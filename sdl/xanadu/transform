#ifndef XANADU__TRANSFORM
#define XANADU__TRANSFORM

#include "tuple"
#include "vector"
#include "matrix"

namespace xanadu
{

template<typename T>
class t_translate3;

template<typename T>
t_matrix<4, T>& operator*=(t_matrix<4, T>& a_value0, const t_translate3<T>& a_value1);

template<typename T>
struct t_translate3
{
	friend t_matrix<4, T>& operator*=<>(t_matrix<4, T>& a_value0, const t_translate3<T>& a_value1);

	typedef T t_value;

	t_vector3<T> v_value;

	explicit t_translate3(const t_tuple3<T>& a_value) : v_value(a_value)
	{
	}
	t_translate3(T a_x, T a_y, T a_z) : v_value(a_x, a_y, a_z)
	{
	}
	operator t_matrix<4, T>() const
	{
		T vs[4][4] = {
			{1.0, 0.0, 0.0, v_value.v_x},
			{0.0, 1.0, 0.0, v_value.v_y},
			{0.0, 0.0, 1.0, v_value.v_z},
			{0.0, 0.0, 0.0, 1.0}
		};
		return t_matrix<4, T>(vs);
	}
};

template<typename T>
inline t_matrix<4, T>& operator*=(t_matrix<4, T>& a_value0, const t_translate3<T>& a_value1)
{
	for (size_t i = 0; i < 4; ++i)
		for (size_t j = 0; j < 3; ++j)
			a_value0[i][3] += a_value0[i][j] * a_value1.v_value[j];
	return a_value0;
}

template<typename T>
inline t_matrix<4, T> operator*(const t_matrix<4, T>& a_value0, const t_translate3<T>& a_value1)
{
	t_matrix<4, T> value = a_value0;
	return value *= a_value1;
}

template<typename T>
class t_scale3;

template<size_t N, typename T>
t_matrix<N, T>& operator*=(t_matrix<N, T>& a_value0, const t_scale3<T>& a_value1);

template<typename T>
struct t_scale3
{
	template<size_t N, typename U>
	friend t_matrix<N, U>& operator*=(t_matrix<N, U>& a_value0, const t_scale3<U>& a_value1);

	typedef T t_value;

	t_vector3<T> v_value;

	explicit t_scale3(const t_tuple3<T>& a_value) : v_value(a_value)
	{
	}
	explicit t_scale3(T a_value) : v_value(a_value, a_value, a_value)
	{
	}
	t_scale3(T a_x, T a_y, T a_z) : v_value(a_x, a_y, a_z)
	{
	}
	operator t_matrix<3, T>() const
	{
		T vs[3][3] = {
			{v_value.v_x, 0.0, 0.0},
			{0.0, v_value.v_y, 0.0},
			{0.0, 0.0, v_value.v_z}
		};
		return t_matrix<3, T>(vs);
	}
};

template<size_t N, typename T>
inline t_matrix<N, T>& operator*=(t_matrix<N, T>& a_value0, const t_scale3<T>& a_value1)
{
	for (size_t i = 0; i < N; ++i)
		for (size_t j = 0; j < 3; ++j)
			a_value0[i][j] *= a_value1.v_value[j];
	return a_value0;
}

template<size_t N, typename T>
inline t_matrix<N, T> operator*(const t_matrix<N, T>& a_value0, const t_scale3<T>& a_value1)
{
	t_matrix<N, T> value = a_value0;
	return value *= a_value1;
}

template<typename T>
struct t_rotate3
{
	typedef T t_value;

	t_vector3<T> v_axis;
	T v_angle;

	t_rotate3()
	{
	}
	t_rotate3(const t_rotate3<T>& a_value) : v_axis(a_value.v_axis), v_angle(a_value.v_angle)
	{
	}
	t_rotate3(const t_vector3<T>& a_axis, T a_angle) : v_axis(a_axis), v_angle(a_angle)
	{
	}
	t_rotate3(T a_x, T a_y, T a_z, T a_angle) : v_axis(a_x, a_y, a_z), v_angle(a_angle)
	{
	}
	t_rotate3<T>& operator=(const t_rotate3<T>& a_value)
	{
		v_axis = a_value.v_axis;
		v_angle = a_value.v_angle;
		return *this;
	}
	template<size_t N>
	t_rotate3<T>& operator=(const t_matrix<N, T>& a_value)
	{
		v_axis.v_x = static_cast<float>(a_value[2][1] - a_value[1][2]);
		v_axis.v_y = static_cast<float>(a_value[0][2] - a_value[2][0]);
		v_axis.v_z = static_cast<float>(a_value[1][0] - a_value[0][1]);
		T d = v_axis * v_axis;
		if (d > 1.0E-6) {
			d = sqrt(d);
			v_angle = static_cast<float>(atan2(d * 0.5, (a_value[0][0] + a_value[1][1] + a_value[2][2] - 1.0) * 0.5));
			v_axis /= d;
		} else {
			v_axis = t_vector3<T>(0.0, 1.0, 0.0);
			v_angle = 0.0;
		}
		return *this;
	}
/*
	t_rotate3<T>& operator=(const t_quaternion<T>& a_value)
	{
		T d = a_value.v_x * a_value.v_x + a_value.v_y * a_value.v_y + a_value.v_z * a_value.v_z;
		if (d > 1.0E-6) {
			d = sqrt(d);
			v_axis /= d;
			v_angle = 2.0 * atan2(d, a_value.v_w);
		} else {
			v_axis = t_vector3<T>(0.0, 1.0, 0.0);
			v_angle = 0.0;
		}
	}
*/
	bool operator==(const t_rotate3<T>& a_value) const
	{
		return v_axis == a_value.v_axis && v_angle == a_value.v_angle;
	}
	operator t_matrix<3, T>() const
	{
		T d = v_axis.f_length();
		if (d < 1.0E-10) return t_matrix<3, T>(1.0);
		t_vector3<T> vector = v_axis / d;
		T s = sin(v_angle);
		T c = cos(v_angle);
		T d0 = 1.0 - c;
		T zx = vector.v_z * vector.v_x;
		T xy = vector.v_x * vector.v_y;
		T yz = vector.v_y * vector.v_z;
		const T vs[3][3] = {
			{
				d0 * vector.v_x * vector.v_x + c,
				d0 * xy - s * vector.v_z,
				d0 * zx + s * vector.v_y
			}, {
				d0 * xy + s * vector.v_z,
				d0 * vector.v_y * vector.v_y + c,
				d0 * yz - s * vector.v_x
			}, {
				d0 * zx - s * vector.v_y,
				d0 * yz + s * vector.v_x,
				d0 * vector.v_z * vector.v_z + c
			}
		};
		return t_matrix<3, T>(vs);
	}
	bool f_equals(const t_rotate3<T>& a_value, T a_epsilon) const
	{
		return v_axis.f_equals(a_value.v_axis, a_epsilon) && f_absolute(v_angle - a_value.v_angle) <= a_epsilon;
	}
};

template<size_t N, typename T>
inline t_matrix<N, T>& operator*=(t_matrix<N, T>& a_value0, const t_rotate3<T>& a_value1)
{
	return a_value0 *= static_cast<t_matrix<3, T> >(a_value1);
}

template<size_t N, typename T>
inline t_matrix<N, T> operator*(const t_matrix<N, T>& a_value0, const t_rotate3<T>& a_value1)
{
	t_matrix<N, T> value = a_value0;
	return value *= a_value1;
}

template<typename T>
inline t_matrix<4, T> f_frustum(T a_left, T a_right, T a_bottom, T a_top, T a_near, T a_far)
{
	t_matrix<4, T> m(0.0);
	m[0][0] = 2.0 * a_near / (a_right - a_left);
	m[0][2] = (a_right + a_left) / (a_right - a_left);
	m[1][1] = 2.0 * a_near / (a_top - a_bottom);
	m[1][2] = (a_top + a_bottom) / (a_top - a_bottom);
	m[2][2] = -(a_far + a_near) / (a_far - a_near);
	m[2][3] = -2.0 * a_far * a_near / (a_far - a_near);
	m[3][2] = -1.0;
	return m;
}

template<typename T>
inline t_matrix<4, T> f_orthographic(T a_left, T a_right, T a_bottom, T a_top, T a_near, T a_far)
{
	t_matrix<4, T> m(1.0);
	m[0][0] = 2.0 / (a_right - a_left);
	m[0][3] = -(a_right + a_left) / (a_right - a_left);
	m[1][1] = 2.0 / (a_top - a_bottom);
	m[1][3] = -(a_top + a_bottom) / (a_top - a_bottom);
	m[2][2] = -2.0 / (a_far - a_near);
	m[2][3] = -(a_far + a_near) / (a_far - a_near);
	return m;
}

template<size_t N, typename T, typename U>
inline U f_affine(const t_matrix<N, T>& a_value0, const U& a_value1)
{
	U x;
	for (size_t i = 0; i < N - 1; ++i) {
		x[i] = a_value0[i][N - 1];
		for (size_t j = 0; j < N - 1; ++j) x[i] += a_value0[i][j] * a_value1[j];
	}
	return x;
}

template<size_t N, typename T, typename U>
inline U f_transform3(const t_matrix<N, T>& a_value0, const U& a_value1)
{
	U x;
	for (size_t i = 0; i < 3; ++i) {
		x[i] = a_value0[i][0] * a_value1[0];
		x[i] += a_value0[i][1] * a_value1[1];
		x[i] += a_value0[i][2] * a_value1[2];
	}
	return x;
}

typedef t_translate3<float> t_translate3f;
typedef t_scale3<float> t_scale3f;
typedef t_rotate3<float> t_rotate3f;
typedef t_translate3<double> t_translate3d;
typedef t_scale3<double> t_scale3d;
typedef t_rotate3<double> t_rotate3d;

}

#endif
